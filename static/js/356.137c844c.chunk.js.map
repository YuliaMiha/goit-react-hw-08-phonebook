{"version":3,"file":"static/js/356.137c844c.chunk.js","mappings":"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","sources":["redux/contacts/contactSelector.js","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.scss?e1a7","components/ContactList/ContactList.jsx","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/pages/ContactsPages/contactsPages.module.scss?cd0e","pages/ContactsPages/ContactsPages.jsx","webpack://goit-react-hw-08-phonebook/./src/styled/baseForm.module.scss?c394"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectContacts = state => {\n  return state.contacts.contacts.items;\n};\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filterElem) => {\n    return contacts.filter(elem =>\n      elem.name.toLowerCase().includes(filterElem.toLowerCase())\n    );\n  }\n);","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectFilter } from '../../redux/contacts/contactSelector';\nimport { filterContactsAction } from '../../redux/contacts/contactSlice';\nimport scss from '../../styled/baseForm.module.scss';\n\nconst Filter = () => {\n  const filterValue = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  return (\n    <section className={scss.section}>\n      <div className={scss.wrapperForm}>\n        <form className={scss.contentForm}>\n          <div className={scss.contentForm__box}>\n            <input\n              name=\"filter\"\n              type=\"text\"\n              value={filterValue}\n              onChange={e => dispatch(filterContactsAction(e.target.value))}\n              placeholder=\"Filter contacts\"\n              className={scss.input}\n            />\n            <label className={scss.label}>Find contacts by name</label>\n          </div>\n        </form>\n      </div>\n    </section>\n  );\n};\nexport default Filter;","// extracted by mini-css-extract-plugin\nexport default {\"overList\":\"ContactList_overList__YbloA\",\"wrapperList\":\"ContactList_wrapperList__R4OxG\",\"item\":\"ContactList_item__Hx051\",\"item__text\":\"ContactList_item__text__So5g8\",\"item__button\":\"ContactList_item__button__oAu8y\"};","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport {\n  deleteContactsThunk,\n  getContactsThunk,\n} from '../../redux/contacts/contactsThunk';\nimport { selectFilteredContacts } from '../../redux/contacts/contactSelector';\n\nimport scss from './ContactList.module.scss';\n\nfunction ContactList() {\n  const contacts = useSelector(selectFilteredContacts);\n\n  const dispatch = useDispatch();\n  const delateContact = id => dispatch(deleteContactsThunk(id));\n\n  useEffect(() => {\n    dispatch(getContactsThunk());\n  }, [dispatch]);\n\n  const contact = contacts.map(({ name, number, id }) => (\n    <li key={id} className={scss.item}>\n      <p className={scss.item__text}>{name}</p>\n      <p className={scss.item__text}>{number}</p>\n      <button\n        className={scss.item__button}\n        onClick={() => delateContact(id)}\n        type=\"button\"\n      >\n        Delate\n      </button>\n    </li>\n  ));\n\n  return (\n    <div className={scss.overList}>\n      <ul className={scss.wrapperList}>{contact}</ul>\n    </div>\n  );\n}\n\nexport default ContactList;","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { useState } from 'react';\nimport React from 'react';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from '../../redux/contacts/contactSelector';\nimport { addContactsThunk } from '../../redux/contacts/contactsThunk';\nimport scss from '../../styled/baseForm.module.scss';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(selectContacts);\n  const actions = {\n    name: setName,\n    number: setNumber,\n  };\n  const handleChange = e => {\n    const { name, value } = e.target;\n    actions[name](value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const newContact = { name, number };\n    if (\n      contacts.some(\n        contact =>\n          contact.name.toLowerCase().trim() === name.toLowerCase().trim() ||\n          contact.number.trim() === number.trim()\n      )\n    ) {\n      return alert(`${name} already exists`);\n    }\n    dispatch(addContactsThunk(newContact));\n    handleReset();\n  };\n  const handleReset = () => {\n    // console.log(Object.values(actions));\n    Object.values(actions).map(item => item(''));\n  };\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  return (\n    <>\n      <div className={scss.wrapperForm}>\n        <form onSubmit={handleSubmit}>\n          <div className={scss.contentForm__box}>\n            <input\n              id={nameInputId}\n              onChange={handleChange}\n              name=\"name\"\n              value={name}\n              type=\"text\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n              className={scss.input}\n            />\n            <label htmlFor={nameInputId} className={scss.label}>\n              Name\n            </label>\n          </div>\n          <div className={scss.contentForm__box}>\n            <input\n              id={numberInputId}\n              onChange={handleChange}\n              name=\"number\"\n              value={number}\n              type=\"tel\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n              className={scss.input}\n            />\n            <label htmlFor={numberInputId} className={scss.label}>\n              Number\n            </label>\n          </div>\n\n          <button className={scss.button} type=\"submit\">\n            Add contact\n          </button>\n        </form>\n      </div>\n    </>\n  );\n};\nexport default ContactForm;","// extracted by mini-css-extract-plugin\nexport default {\"wrapperContact\":\"contactsPages_wrapperContact__8afcw\",\"wrapperFilter\":\"contactsPages_wrapperFilter__7ITr6\"};","import Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport scss from './contactsPages.module.scss';\n\nexport default function contactsPage() {\n  return (\n    <div>\n      <div className={scss.wrapperContact}>\n        <ContactForm />\n        <ContactList />\n      </div>\n      <div className={scss.wrapperFilter}>\n        <Filter />\n      </div>\n    </div>\n  );\n}","// extracted by mini-css-extract-plugin\nexport default {\"wrapperForm\":\"baseForm_wrapperForm__DSbcy\",\"title\":\"baseForm_title__HUXb4\",\"contentForm__box\":\"baseForm_contentForm__box__H6ybt\",\"label\":\"baseForm_label__vN4RY\",\"input\":\"baseForm_input__r7Tif\",\"icon\":\"baseForm_icon__I2-dH\",\"button\":\"baseForm_button__FxBEH\",\"loginRegister\":\"baseForm_loginRegister__HTGtN\",\"loginRegister__text\":\"baseForm_loginRegister__text__Jefyg\",\"loginRegister__link\":\"baseForm_loginRegister__link__jtUm3\"};"],"names":["selectFilter","state","contacts","filter","selectContacts","items","selectFilteredContacts","createSelector","filterElem","elem","name","toLowerCase","includes","filterValue","useSelector","dispatch","useDispatch","_jsx","className","scss","children","_jsxs","type","value","onChange","e","filterContactsAction","target","placeholder","useEffect","getContactsThunk","contact","map","_ref","number","id","onClick","deleteContactsThunk","delateContact","nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","setNumber","actions","handleChange","_e$target","handleReset","Object","values","item","nameInputId","numberInputId","_Fragment","onSubmit","preventDefault","newContact","some","trim","alert","concat","addContactsThunk","pattern","title","required","htmlFor","contactsPage","ContactForm","ContactList","Filter"],"sourceRoot":""}